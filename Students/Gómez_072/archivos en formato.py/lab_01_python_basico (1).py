# -*- coding: utf-8 -*-
"""Lab_01_python_basico.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IK70568GINzzRIpeLYu64XPf6YrWHl52

# Laboratorio 01
### Métodos computacionales para físicos  y astrónomos
### Universidad de Antioquia
### Prof: Hernan D. Salinas Jiménez
"""

# Commented out IPython magic to ensure Python compatibility.
# Ejecutar esta celda antes de cada laboratorio
!git clone https://github.com/hernansalinas/autogrades.git
# %run -i autogrades/example/libs/libUnitTest.py

"""# Operaciones básicas en python.


### Definicion de variables
1. Definir una variable x tipo entero.
2. Definir una variable y tipo float 
3. Definir una variable z tipo string.
"""

x=int(3)
y= float(1.5)
z= 'Mariana'

# Commented out IPython magic to ensure Python compatibility.
# Ejecute la presente celda para probar su solucion 
# %run -i autogrades/example/libs/Lab_autotesting01/test01.py

"""
###  Creación de Funciones
4. Crear una función con el nombre mul_lambda, lambda que multiple dos enteros, el resultado deberá ser un número entero.  

Ejemplo de ejecución:

```python
mul_lambda(a,b)
donde a, y b son numeros enteros
```


5. Crear una función explicita con el nombre de suma_int, que realice la suma de dos números enteros

Ejemplo de ejecución:

```python
sum_int(a,b)
donde a, y b son numeros enteros
```

"""

#numeral 4

mul_lambda = lambda a,b : a*b

#numeral 5

def sum_int(a,b):
  c= a+b
  return c

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test02.py

"""
###  Números complejos

6. Defina un número complejo w.
7. Retorne la parte imaginaria de w, almacenela en una variable w_img
8. Retorne la parte real de w, almacenela en una variable w_real.
9. Retorne el complejo conjugado de w, almacenla en una varible w_con.
"""

w= complex(1,2)
w_img = w.imag
w_real = w.real
w_con = w.conjugate()

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test03.py

"""###  Listas 

10.0  Construir una lista L con las variables usadas hasta acá y los resultados de las funciones.

L=[x,y,z,mul_lambda, mul_int,w, w_img, w_real, w_con ]

11.0 Invierta la lista y almacene en una variable L_reverse 

12.0 Almacene los elementos impares de la lista, L_imp

13.0 Almacene los elementos pares de la lista, L_par

14.0 Modifique el elemento 5 de la lista L con la palabra "hello world"

"""

mul_int = sum_int

L=[x,y,z,mul_lambda, mul_int ,w, w_img, w_real, w_con ]
L

'''L.reverse()                 #se aplica la función para invertirla
L_reverse = L               #la lista que quiero imprimir la llamo nuevamente con elnombre de la original
L_reverse'''

L_reverse= L[::-1]
L_reverse

L_imp=L[1::2]          #que comience en la posición 1, que vaya hasta el final, y que salte de a dos pasos
L_par=L[0::2]

#L[5] = 'hello world'

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test04.py

"""###  Tuplas

15.0 Definir una tupla con 5 elementos almacenda en la variable Tup, los primeros 3 tipo string y los ultimos dos, tipo float. 
"""

Tup = ('Mariana', 'Gómez', 'Cuartas', 20.0, 4.0)
print(len(Tup))

# Commented out IPython magic to ensure Python compatibility.
#   %run -i autogrades/example/libs/Lab_autotesting01/test05.py

"""###  Set 
16.0 Defina una variable tipo set llamada  D con los primeros 10 numeros de Bernulli, consultalos en la red. Notese que pasa en este variables cuando alguno de los elementos se repite

17.0 Defina una variable tipo set llamada E con los números naturales del 1 al 20.

18.0 Calcule la unión  y almacenela en una variable U.

19.0 Calcule la intersección y almacenela en una variable I

"""

D= set([1, -(1/2), 1/6, 0, -(1/30), 0, 1/42, 0, -(1/30), 0, 5/66])
D

#no quedan en el orden que se pone, y los repetidos no se cuentan

E= set(range(1,20))
E

U= D.union(E)
I=D.intersection(E)

# Commented out IPython magic to ensure Python compatibility.
#  %run -i autogrades/example/libs/Lab_autotesting01/test06.py

"""













###  Diccionarios 
20.0 Construi un diccionario con 5 elementos cuya clave es el nombre del autor y valor el nombre del libro. Almacenarlo en una variable dicc.



"""

dicc = {'Hawking':'A brief story of time', 'J.K Rowling' : 'Harry Potter', 
        'Dan Brown': 'El Código da Vinci', 'J.R.R. Tolkien':'El Señor de los Anillos',
        'Margaret Mitchell': 'Lo que el viento se llevó '}

#dicc['Hawking']

# Commented out IPython magic to ensure Python compatibility.
#  %run -i autogrades/example/libs/Lab_autotesting01/test07.py

"""
####  Ciclos y condicionales 

21.0  Cálculo de $\pi$. Empleando la siguiente seria :

\begin{equation}
\frac{\pi}{4} = 1 -\frac{1}{3}+-\frac{1}{5}-\frac{1}{7}+\frac{1}{9}-...
\end{equation}

Construya una función llamada pi_number en el que entrado el valor de k,(número de términos de la serie ) calcule el valor de pi. Si k es negativo deberá retornar un error como una variable tipo string.

Ejemplo de ecución:
```python
pi_number(10)
```"""

def pi_number(a):
  if a<0:
    return ('Ingrese un número no negativo')
  elif a==0:
    pi=0               #no se tiene en cuenta ningún término
  elif a==1:
    pi=4
  else:
    valores= [i for i in range(1, a*2)]
    impares=valores[2::2]                     #genero los impares que necesito en los denominadores
    a_sumar = [1]
    for i in  range(2,a+1):
      elem= (-1)**(i+1) * (1/impares[i-2])    #determinación de los elementos a sumar a partir del segundo término
      a_sumar.append(elem)
    pi= 4* sum(a_sumar)
  return pi

pi_number(10000000)

# Commented out IPython magic to ensure Python compatibility.
#  %run -i autogrades/example/libs/Lab_autotesting01/test08.py