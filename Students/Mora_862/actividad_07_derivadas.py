# -*- coding: utf-8 -*-
"""Actividad_07_derivadas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ojcpDEqJ-Jnom5hq_OnLjyOZWzm0L2uU

<a href="https://colab.research.google.com/github/hernansalinas/autogrades/blob/main/Actividades_clase/Actividad_07_derivadas.pynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>



# Actividad 7
### Métodos computacionales para físicos  y astrónomos
### Universidad de Antioquia
### Prof: Hernan D. Salinas Jiménez
Ref: https://github.com/restrepo/ComputationalMethods

El potencial eléctrico de un anillo de radio R, en la parte superior z del anillo viene dado por: 


\begin{equation}
V = \frac{kq_{tot}z}{\sqrt{z^2+R^2}}
\end{equation}

Calcule el campo eléctrico para z>0 y R=0.1mm. Reescale el problema en unidades de $kq_{top}$ empleando:

1. La librearia sympy.

2. Calcular el campo en el punto  $z = 0.1mm$ empleando el metodo [misc.derivative](https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.derivative.html)

3. Calcular el campo para diferentes valores de z con z>0,,  empleando misc derivative. Construya un grafico de E vs z.

4. Entender la generalizacion de la siguiente función, y aplicarla para calcular la derivada.


```python
import numpy as np
from scipy import misc
def derivative(func,x0,**kwargs):
    '''
    Vectorized replacement of scipy.misc derivative:
        from scipy.misc import derivative
    For usage check the derivative help, e.g, in jupyter: 
        from scipy.misc import derivative
        derivative?
    '''
    try:
        #x0: can be an array or a list  
        nn=np.asarray(x0).shape[0] ## force error if float is used 
        fp=np.vectorize(misc.derivative)
    except IndexError:
        fp=misc.derivative
        
    return fp(func,x0,**kwargs)

assert isinstance(derivative(np.sin,1,dx=1E-6),float)

```
"""

from scipy import misc
import sympy as sp
import numpy as np

import matplotlib.pyplot as plt

"""\begin{equation}
V = \frac{kq_{tot}z}{\sqrt{z^2+R^2}}
\end{equation}

Reescalando la ecuación:

\begin{equation}
V^* = \frac{z}{\sqrt{z^2+R^2}}
\end{equation}
"""

r=0.1e-3
x = sp.symbols("x")

def V(x):
  return x/(x**2+r**2)**(1/2)

dV=sp.diff(V(x),x)
dV

dVnumpy= sp.lambdify(x,dV,'numpy')
x_ = np.linspace(0, 0.001, 100)

plt.figure()
plt.plot(x_, -1*dVnumpy(x_), color='pink' )
plt.ylim(-10000, 100)
plt.xlim(0, 0.001)
plt.xlabel('z')
plt.title('$Gráfico$ $E$ $vs$ $z$')
plt.ylabel('E')

campopuntoz=-1*dVnumpy(0.1e-3)
campopuntoz

#con misc.derivative
from scipy.misc import derivative

for i in x_:
  d=derivative(V,i,dx=1e-8)

  print(-1*d)

#vetorizado
derivada=np.vectorize(derivative)
a=-1*derivada(V,x_, dx=1e-8)
a

plt.plot(x_,a, color='skyblue')
plt.ylim(-10000, 100)
plt.xlim(0, 0.001)
plt.xlabel('z')
plt.title('$Gráfico$ $E$ $vs$ $z$ $con$ $datos$ $vectorizados$')
plt.ylabel('E')

"""# **EN CLASE**"""

def potential(z,R,kq):
  if (z>=0):
    V= z*kq/np.sqrt(z**2+R**2)
  else:
    V=0
  return V





z=np.linspace(0, 0.002, 100)
R=0.1e-3
kq=1

derivative=np.vectorize(derivative, excluded=['args'])
gradV=derivative(potential, z, dx= 1e-6, args=(R, kq))
campoelectrico=-gradV
plt.plot(z,campoelectrico, color='salmon')
plt.xlim(0.00003, 0.002)

"""POTENCIAL EN UN DISCO:
\begin{equation}
V =\frac{q}{\pi R^2} 2k\pi (\sqrt{z^2+R^2}-z)
\end{equation}

\
"""

#este código calcula el potencial de un disco o un anillo
def potential(z, R, kq, select):
  if(select=='anillo'):
    V=z*kq/np.sqrt(z**2+R**2)
  elif(select=='disco'):
    V=(2*kq/R**2)*(np.sqrt(z**2+R**2)-z)
  else:
    print('LA PALABRA DEBE SER ANILLO O DISCO')
    V=None
  return V

potential(0.001, 0.1e-3, kq=1, select='disco')

z=np.linspace(0, 0.002, 100)
R=0.1e-3
kq=1
select= 'disco'


derivative=np.vectorize(derivative, excluded=['args'])
try:
  gradV=derivative(potential, z, dx= 1e-6, args=(R, kq, select))
  campoelectrico=-gradV
except:
  print('LA PALABRA DEBE SER ANILLO O DISCO')

plt.plot(z,campoelectrico, color='greenyellow')
plt.xlim(0.00003, 0.002)

#programa .py
import numpy as numpy
from scipy.misc import derivative

z=np.linspace(0, 0.002, 100)
R=0.1e-3
kq=1
select= 'disco'

def potential(z, R, kq, select):
  if(select=='anillo'):
    V=z*kq/np.sqrt(z**2+R**2)
  elif(select=='disco'):
    V=(2*kq/R**2)*(np.sqrt(z**2+R**2)-z)
  else:
    print('LA PALABRA DEBE SER ANILLO O DISCO')
    V=None
  return V

derivative=np.vectorize(derivative, excluded=['args'])
try:
  gradV=derivative(potential, z, dx= 1e-6, args=(R, kq, select))
  campoelectrico=-gradV
  np.savetxt('campoelectrico.txt',campoelectrico)
except:
  print('LA PALABRA DEBE SER ANILLO O DISCO')