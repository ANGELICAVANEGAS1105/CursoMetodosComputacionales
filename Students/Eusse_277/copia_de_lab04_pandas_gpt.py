# -*- coding: utf-8 -*-
"""Copia de Lab04_pandas_gpt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1scbDPIetYRpVT101sJeLHZvN17BQQPyJ

<a href="https://colab.research.google.com/github/hernansalinas/autogrades/blob/main/Laboratorios_Taller/Lab04_pandas_gpt.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

### Pandas y chat gpt

### Problema 1
1. a) Generar un diccionario con CHATGPT con los premios nobel de fisica de la decada que tu elijas.  El diccionario debe tener la siguiente estructura:

clave: Nombre del cientifico, el nombre del cientifico se debe llamar de la siguiente forma: Inicial del nombre del cientifico y Apellido, ejemplo: A. Einstein., R. Feyman.

Valor: diccionario con el año y el motivo por que el gano el premio nobel resumido maximo 10 palabras.


b). Con el diccionario construir un dataframe de pandas y almacenarlo como un archivo csv. Las columnas del data frame se deberán llamar Cientifico, AnoNobel, Motivo. 




### Problema 2

Usando el dataset `PS4_1.csv`, convertir la serie `Date` en el indice (serie de tiempo) y eliminar la serie `Unnamed: 1` (generado por pandas), retornar un  diccionario con en el siguiente orden:

* cantidad de columnas
* Nombre de las columnas
* número de registros no NaN de cada columna
* cantidad total de memoria usada para cargar el dataset en el computador ,( df.memory_usage() )
* Estadistica basica para cada columna, media, desviacion estandar, maximo
* Remplazar los NaN por None


### Problema 3

Realizar la lectura del data frame "Crimes_-_2019.csv" asociado a los crimenes que se presentaron en Chicago en el 2019. 


1. Ver la estadistica general del data frame.
2. Elimnar  las columnas PrimaryType, y Date.
3. Transformar la columna Date que es tipo string en una tipo Fecha, use el siguiente metodo de pandas pd.to_datetime(df.Date,format="%m/%d/%Y %I:%M:%S %p")
4. Mostrar los casos totales para cada tipo de crimen de forma ascendente, emplee:
   df.groupby(columna).Date.count()
   
   sort_values()
5. Ordenar los valores por orden alfabetico de Primary type
6. Mostrar de la fila 100 a la 120
6. Realizar una visualización de los datos anteriores.Emplee la libreria  seaborn con un grafico tipo barplot. Ej.
   ax = sns.barplot(x = "contador", y="Primary Type", data = datos)




### Problema 4

1. Leer el dataset country_vaccinations.csv  y filtrar los datos para Colombia
2. Crear un csv con los datos para colombia
3. Realizar una comparacion con los paises latinoamericanos de la cantidad de vacunados.
4. A traves de mascaras determinar el numero de vacunados en el intervalo  [1.5E6, 2.0E6]




Referencias: Puedes consultar la pagina kaggle para estudiar mas acerca de pandas

Pregunta para el chat GPT \n Generar un diccionario de python con  clave valor,donde la clave son los nombres de los fisicos que ganaron el premio nobel entre 1980 a 1990, incluir como valor del diccionario un diccionario con el año en que gano y 10 palabras con el motivo : Ejemplo 

Dicc={"A.Einstein":{1905:"efecto foto electrico"}}
"""

import pandas as pd
import numpy as np

dicc= {"Antioquia":"Medellín","Bolivar":"Cartagena", "Atlantico":"Barranquilla","Cundinamarca":"Bogotá", "Amazonas":"Leticia"}
print(dicc.keys())
print(dicc.values())
for i,s in enumerate(dicc):
  print(i,s, dicc[s])
serie = pd.Series(dicc)
serie
serie.iloc[:2]

#Una lista de series es un DataFrame
d1 = {"Name":"Juan","Topic":"Quantum Mechanics","Score":10}
d2= {"Name":"Pedro","Topic":"Statistical","Score":10}
d3= {"Name":"Ana","Topic":"Clasical Mechanics","Score":10}

record1 = pd.Series(d1)
record2= pd.Series(d2)
record3 = pd.Series(d3)

df1 = pd.DataFrame([record1,record2,record3])
df1

df1.Name + " " +df1.Topic
#df1["Score"]

df1 = pd.DataFrame([record1,record2,record3],index= ["UdeA","Unal","ITM"])
df1

"""##**Problema 1**
a) Generar un diccionario con CHATGPT con los premios nobel de fisica de la decada que tu elijas. El diccionario debe tener la siguiente estructura:
clave: Nombre del cientifico, el nombre del cientifico se debe llamar de la siguiente forma: Inicial del nombre del cientifico y Apellido, ejemplo: A. Einstein., R. Feyman.

Valor: diccionario con el año y el motivo por que el gano el premio nobel resumido maximo 10 palabras.

b). Con el diccionario construir un dataframe de pandas y almacenarlo como un archivo csv. Las columnas del data frame se deberán llamar Cientifico, AnoNobel, Motivo.
"""

fisicos_nobel = {
  "A. H. Mueller": {'Año':1999,'Motivo': 'Desarrollo de la Cromodinámica Cuántica de Altas Energías'},

    "C. N. Yang": {'Año':1957,'Motivo': "Teoría de la Paridad"},

    "C. Rubbia": {'Año':1984,'Motivo': "Descubrimiento de las partículas W y Z"},

    "D. Gross": {'Año':2004,'Motivo': "Descubrimiento de la libertad asintótica"},

    "G. Charpak": {'Año':1992, 'Motivo': "Inventor de la Cámara Proporcional Multi-hilo"},

    "J. Friedman": {'Año':1990,'Motivo': "Descubrimiento de los quarks dentro del protón"},

    "J. M. Kosterlitz": {'Año':2016,'Motivo': "Descubrimiento de las transiciones de fase topológicas"},

    "L. Lederman": {'Año':1988,'Motivo': "Descubrimiento del neutrino muónico"},

    "M. Gell-Mann": {'Año':1969,'Motivo': "Contribuciones al modelo de quarks"},

    "M. Perl": {'Año':1995, 'Motivo': "Descubrimiento del tauón"},

    "N. Bloembergen": {'Año':1981,'Motivo': "Contribuciones a la espectroscopía óptica"},

    "P. Dirac": {'Año':1933,'Motivo': "Descubrimiento de la ecuación de Dirac"},

    "R. Feynman": {'Año':1965,'Motivo': "Contribuciones a la electrodinámica cuántica"},

    "R. Laughlin": {'Año':1998,'Motivo': "Descubrimiento de los estados de Hall cuánticos fraccionarios"},

    "S. Glashow": {'Año':1979,'Motivo': "Unificación de la fuerza débil y electromagnética"},

    "S. Weinberg": {'Año':1979,'Motivo': "Unificación de la fuerza débil y electromagnética"},

    "T. Alferov": {'Año':2000,'Motivo': "Desarrollo de los dispositivos semiconductores de alta velocidad"},

    "V. Fitch": {'Año':1980,'Motivo': "Descubrimiento de la violación de la simetría CP"},
    
    "W. Kohn": {'Año':1998,'Motivo': "Desarrollo de la teoría del funcional de la densidad"}
}

df = pd.DataFrame(fisicos_nobel)
df

g=df.transpose().reset_index()
g

g.columns

g= g.rename(columns={"index":"Cientifico"})
g.to_csv('datos.csv', index=False)
g

"""# **Problema 2.**
Usando el dataset PS4_1.csv, convertir la serie Date en el indice (serie de tiempo) y eliminar la serie Unnamed: 1 (generado por pandas), retornar un diccionario con en el siguiente orden:

+ cantidad de columnas
* Nombre de las columnas
* número de registros no NaN de cada columna
* cantidad total de memoria usada para cargar el dataset en el computador ,( df.* memory_usage() )
* Estadistica basica para cada columna, media, desviacion estandar, maximo
* Remplazar los NaN por None
"""

data="https://docs.google.com/spreadsheets/d/e/2PACX-1vS9CxYUHE8VRu83xCqtusyW2dFZwtCXficL1jUjTGFeeQvz-ms87r62wcVtFG1tAw/pub?output=xlsx"
DF= pd.read_excel(data)
DF = DF.rename(columns={'Date':'Serie de tiempo'})
DF= DF.drop('Unnamed: 1',axis=1)
nombres_columns= DF.columns.tolist()
Registro_no_nan= DF.count(axis=0)
Memoria= DF.memory_usage().sum() # Este numero es el numero de bits de todo el Dataframe?

dicc = {'Numero de columnas': DF.shape[1],'Nombre de las columnas':nombres_columns,
        'Número de registros no NaN de cada columna':Registro_no_nan,'Memoria':Memoria,
        'Estadisticas':{'Media': DF.mean(),'Desviacion': DF.std(),'Máximo':DF.max()}}
DF = DF.fillna('None')
DF
print(dicc)

Dicc= pd.Series(dicc)
Dicc
#Diccionario= pd.DataFrame(Dicc)
#Diccionario

"""# **Problema 3**

Realizar la lectura del data frame "Crimes_-_2019.csv" asociado a los crimenes que se presentaron en Chicago en el 2019.

1. Ver la estadistica general del data frame.



2. Elimnar las columnas PrimaryType, y Date.

3. Transformar la columna Date que es tipo string en una tipo Fecha, use el siguiente metodo de pandas pd.to_datetime(df.Date,format="%m/%d/%Y %I:%M:%S %p")

4. Mostrar los casos totales para cada tipo de crimen de forma ascendente, emplee: df.groupby(columna).Date.count()

sort_values()

5. Ordenar los valores por orden alfabetico de Primary type

6. Mostrar de la fila 100 a la 120

7. Realizar una visualización de los datos anteriores.Emplee la libreria seaborn con un grafico tipo barplot. Ej. ax = sns.barplot(x = "contador", y="Primary Type", data = datos)
"""

from google.colab import drive
drive.mount('/content/drive')

datos = pd.read_excel("/content/drive/MyDrive/Crimes_-_2019.xlsx" ,nrows = 500)

df= pd.DataFrame(datos)
df_copy= df.copy()
df
sin_PT= df_copy.drop('Primary Type',axis=1)
sin_PT_Date= sin_PT.drop('Date',axis=1)

media= df_copy.mean()
desviacion= df_copy.std()
maximo= df_copy.max()

print("La media del data frame es \n",media)
print("La desviacion del data frame es \n",desviacion)
print("El Maximo del data frame es \n",maximo)

sin_PT

sin_PT['Date']= pd.to_datetime(sin_PT.Date, format="%m/%d/%Y %I:%M:%S %p")# No sé si se hizo algo realmente
print(type(sin_PT.Date[0]))
print(sin_PT.Date[0])

tipos_crimenes=df_copy.groupby('Primary Type').Date.count().sort_values()
tipos_crimenes
suma= tipos_crimenes.sum()
print(suma)
print(tipos_crimenes)

Tipos_crimenes_ordenados= df_copy.sort_values('Primary Type').reset_index()
Tipos_crimenes_ordenados
Tipos_crimenes_ordenados[100:120]

Tipos_crimenes_ordenados.head().reset_index()

import seaborn as sns
contador= np.arange(0,500)
ax= sns.barplot(data =df_copy ,x = contador, y="Primary Type")

"""# **Problema 4**
1. Leer el dataset country_vaccinations.csv y filtrar los datos para Colombia
2. Crear un csv con los datos para colombia
3. Realizar una comparacion con los paises latinoamericanos de la cantidad de  vacunados.
4. A traves de mascaras determinar el numero de vacunados en el intervalo [1.5E6, 2.0E6]
"""

data = pd.read_csv("https://raw.githubusercontent.com/hernansalinas/autogrades/main/Laboratorios_Taller/dataset/country_vaccinations.csv")
vacunados = pd.DataFrame(data)
vacunados

vac_colombia= vacunados[vacunados['country']== 'Colombia']
vac_argentina= vacunados[vacunados['country']== 'Argentina']
vac_bolivia= vacunados[vacunados['country']== 'Bolivia']
vac_brasil=vacunados[vacunados['country']== 'Brasil']
vac_chile=vacunados[vacunados['country']== 'Chile']
vac_cuba=vacunados[vacunados['country']== 'Cuba']
vac_costa_rica=vacunados[vacunados['country']== 'Costa Rica']
vac_ecuador=vacunados[vacunados['country']== 'Ecuador']
vac_el_salvador =vacunados[vacunados['country']== 'El Salvador']
vac_guatemala =vacunados[vacunados['country']== 'Guatemala']
vac_honduras =vacunados[vacunados['country']== 'Honduras']
#vac_honduras =vacunados[vacunados['country']== 'Honduras']
vac_mexico =vacunados[vacunados['country']== 'Mexico']
vac_panama = vacunados[vacunados['country']== 'Panama']
vac_paraguay = vacunados[vacunados['country']== 'Paraguay']
vac_peru = vacunados[vacunados['country']== 'Peru']
vac_uruguay = vacunados[vacunados['country']== 'Uruguay']
vac_venezuela = vacunados[vacunados['country']== 'Venezuela']

import matplotlib.pyplot as plt

y= vac_colombia['total_vaccinations']
x= vac_colombia['date']

#plt.plot(x,y)

fig= plt.figure(figsize=(100,20))
plt.xticks(fontsize=25)
plt.yticks(fontsize=20)
plt.plot(x,y,'o')