# -*- coding: utf-8 -*-
"""Copia de Evaluacion01_2023_I.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k5_P5JV1VCtY25psdQ52BdEismgb8SEq

<a href="https://github.com/hernansalinas/autogrades/tree/main/Evaluaciones/Evaluacion01_2023_I.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# Parcial 01: Metodos computacionales para fisicos 
### Fecha 3/30/23

La entrega del examen es a través del github en la página del curso, en el directorio asociado a cada uno. 

## 1. (50%). Movimiento de una esfera de radio r en un fluido.

 Una esfera de radio $R$ que asciende o desciende por un fluido puede ser modelada a través de un modelo de partícula, sometida a tres fuerzas: el peso, el empuje y la fuerza rozamiento. Las  ecuaciones de posición (x) y velocidad (v) para un sistema de refencia úbicado en la base del fluido, pueden ser escritas como:

\begin{equation}
x = \frac{G}{\alpha} \left( 1+\frac{\alpha v_0}{G} \right)(1-e^{-\alpha t}) - \frac{G}{\alpha}t
\end{equation}

\begin{equation}
v= \left ( v_0 +\frac{G}{\alpha} \right )e^{-\alpha t} - \frac{G}{\alpha}
\end{equation}



donde $G=\left( 1-\frac{\rho_f}{\rho} \right)g$, con $\rho_f$, $\rho$ la densidad del fluido y la esfera respectivamente y $g=9.8$ la aceleración de la gravedad y $\alpha$  una constante que depende del radio de la esfera, la viscosidad y la densidad.
$\alpha=\frac{9\eta}{2R^2\rho}$.

Suponga que una esferita de radio $R=2\times10^{-5}m$ es lanzada verticalmente hacia arriba en el agua, con una rapidez de $v_0=0.01$m/s.
Tomando la densidad del agua en  $\rho_f =10000 kg/m^3$,  la densidad de la esfera en $\rho=2670 kg/m^3$ y la viscosidad en $\eta=0.001 kg/ms$.  Determine: 

1. El tiempo total en que la esfera asciende  y desciende. 

2. Determine la rapidez final, con la que llega nuevamente de donde fue lanzada. 



Para ello construya un programa en python que:
- Permita calcular la posición como función del tiempo
- Permita calcular la rapidez como función del tiempo
- Cálcule  el tiempo total de subida y bajada empleando el método de la secante.

 



## 2. (50%). Interpolación
Para los siguientes datos de temperatura media como función del tiempo de los últimos años de  Bogotá y Barcelona ([Temperature_Bogota_Barcelona](https://raw.githubusercontent.com/hernansalinas/autogrades/main/Evaluaciones/dataset/Temperature_Bogota_Barcelona.csv)). Aplique el método de  hermite y spline cúbicos. Para ello realice lo siguiente:

1. Leer el dataset desde la url, con el comando pd.read_csv.
2. Adicionar una nueva columna AvgTempCelcius con la temperatura en grados celcius. $ C=(F-32)/1.8$
3. Realizar un gráfico de AvgTempCelcius como función del año para la ciudad de Bogotá.
4. Realizar un gráfico de AvgTempCelcius como función del año para la ciudad de Barcelona.
4. Aplique el  metodos de interpolación de hermite para Bogotá y el metodo de interpolación de splines cubicos para Barcelona. 


Ayuda :

| Comando | Descripción |
| --- | --- |
| pd.read_csv() | Lee un archivo CSV y lo convierte en un DataFrame de Pandas |
| pd.read_excel() | Lee un archivo de Excel y lo convierte en un DataFrame de Pandas |
| pd.read_json() | Lee un archivo JSON y lo convierte en un DataFrame de Pandas |
| df.head() | Muestra las primeras filas del DataFrame |
| df.tail() | Muestra las últimas filas del DataFrame |
| df.info() | Muestra información sobre el DataFrame |
| df.describe() | Muestra estadísticas descriptivas del DataFrame |
| df.dropna() | Elimina filas con valores faltantes |
| df.drop_duplicates() | Elimina filas duplicadas |
| df.groupby() | Agrupa el DataFrame por una o más columnas |
| df.sort_values() | Ordena el DataFrame por una o más columnas |
| df.to_csv() | Guarda el DataFrame como un archivo CSV |
| df.loc[condicion] | Crea una máscara booleana para seleccionar filas que cumplan con ciertas condiciones |
| df[df["columna"]== x] | Crea una máscara booleana y a la aplica al dataframe en caso de el valor de la columna coincida con la variable |


Referencias: 

- Dataset tomado y modificado de : https://www.kaggle.com/sudalairajkumar/daily-temperature-of-major-cities

- http://www.sc.ehu.es/sbweb/fisica3/fluidos/stokes_1/stokes_1.html
- Lindemuth J. The effect of air resistance on falling balls. Am. J. Phys. 39, July 1971, pp. 757-759

# Punto 1
"""

import numpy as np # Llamar la libreria
import matplotlib.pyplot as plt 
from scipy.optimize import newton,bisect
import pandas as pd

"""\begin{equation}
x = \frac{G}{\alpha^{2}} \left( 1+\frac{\alpha v_0}{G} \right)(1-e^{-\alpha t}) - \frac{G}{\alpha}t
\end{equation}

\begin{equation}
v= \left ( v_0 +\frac{G}{\alpha} \right )e^{-\alpha t} - \frac{G}{\alpha}
\end{equation}
"""

def x_fluid(t,rho,rhof,R,v0,eta):# Funcion de la posicion en un fluido

  T1= (G/(alpha**2))*(1+((alpha*v0)/G))
  T2 = (1-(np.exp(-alpha*t)))
  T3= (G/alpha)*t

  return (T1*T2)-T3

rho= 2670 #parametros
rhof= 1000
R= 2E-5
v0= 0.01
eta= 0.001

G= (1-(rhof/rho))*(9.8)
alpha = (9*eta)/ (2*(R**2)*rho)
t= np.linspace(0,0.01,100)

params = (t,rho,rhof,R,v0,eta)

plt.plot(t,x_fluid(*params))# Grafica

def v_fluid(t,rho,rhof,R,v0,eta):#Funcion de rapidez


  G= (1-(rhof/rho))*(9.8)
  alpha = (9*eta)/ (2*(R**2)*rho)


  T1= (v0+(G/alpha))*(np.exp(-1*alpha*t))
  T2= G/alpha

  return T1-T2

# Sabemos que el tiempo total en el que la esfera asciende es el tiempo en el Vf= 0
# Asi debemos encontrar un cero para la formula de la velocidad
plt.plot(t,v_fluid(*params))

type(v_fluid(*params))

# Con el metodo de Secante sacaremos el cero de la funcion velocidad
x0= 0
root= newton(v_fluid,x0,args=(rho,rhof,R,v0,eta))
root # Este es el Tiempo desubida
print("El tiempo de subida es ",root,"segundos")

# Con el metodo de la Secante Sacaremos entonces los ceros de la posicion cuando esta regresa a 0
x0_1= 0.001
rootx= newton(x_fluid,x0_1,args=(rho,rhof,R,v0,eta))
rootx

print("El tiempo en el que regresa a 0 es ",rootx,"segundos")

# La rapidez con la que llega es
params2= (rho,rhof,R,v0,eta)
vf= v_fluid(rootx,*params2)
vf

"""# Punto 2"""

url = "https://raw.githubusercontent.com/hernansalinas/autogrades/main/Evaluaciones/dataset/Temperature_Bogota_Barcelona.csv"
datos= pd.read_csv(url)
df= datos

df["AvgTempCelcius"]= (df['AvgTemperature']-32)/1.8

df

copia = df.copy()

Bogota_df= copia[copia['City']== "Bogota"]

plt.plot(Bogota_df['Year'],Bogota_df['AvgTempCelcius'])

Barcelona_Df= copia[copia['City']== "Barcelona"]
plt.plot(Barcelona_Df['Year'],Barcelona_Df['AvgTempCelcius'])

